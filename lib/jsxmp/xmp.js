// Generated by CoffeeScript 1.4.0
var Helper, Xmp, _;

_ = require('underscore');

Helper = require('./helper');

Xmp = (function() {

  function Xmp(env) {
    this.env = env;
  }

  Xmp.prototype.run = function() {
    var context;
    context = this.executeProcess();
    this.write(context);
    return context.status;
  };

  Xmp.prototype.buildProcess = function() {
    return [require('./phase/read'), require('./phase/parse'), require('./phase/pre_transform'), require('./phase/gen_script'), require('./phase/evaluate'), require('./phase/parse_result'), require('./phase/transform')];
  };

  Xmp.prototype.executeProcess = function(process) {
    var Phase, context, phase, _i, _len;
    if (process == null) {
      process = this.buildProcess();
    }
    context = this.makeContext();
    try {
      for (_i = 0, _len = process.length; _i < _len; _i++) {
        Phase = process[_i];
        phase = Phase.factory(context);
        phase.invariant();
        phase.preCondition();
        context = _.extend(context, phase.run());
        phase.postCondition();
        phase.invariant();
        if (context.env.phase === phase.name) {
          break;
        }
      }
    } catch (error) {
      context.status = -1;
      context.error += "[ERROR] " + error.message + " " + error.stack;
    }
    return context;
  };

  Xmp.prototype.makeContext = function() {
    return {
      env: this.env,
      status: 0,
      result: '',
      error: '',
      content: null,
      script: null,
      annotations: null,
      errors: null,
      options: {}
    };
  };

  Xmp.prototype.write = function(context) {
    this.writeCode(context.content);
    this.writeResult(context.result);
    this.writeError(context.error);
    if (context.env.debug) {
      return this.writeDebug(context.debug);
    }
  };

  Xmp.prototype.writeCode = function(content) {
    if (content != null) {
      return console.log(content);
    }
  };

  Xmp.prototype.writeResult = function(result) {
    if ((result != null) && result !== '') {
      return console.log(result.replace(/^/gm, '// >> '));
    }
  };

  Xmp.prototype.writeError = function(error) {
    if ((error != null) && error !== '') {
      return console.log(error.replace(/^/gm, '// ~> '));
    }
  };

  Xmp.prototype.writeDebug = function(debug) {
    if ((debug != null) && debug !== '') {
      return console.log(debug.replace(/^/gm, '// ?> '));
    }
  };

  return Xmp;

})();

exports.Xmp = Xmp;
