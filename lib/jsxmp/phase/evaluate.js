// Generated by CoffeeScript 1.4.0
var Evaluate, Helper, JasmineNodeEvaluate, NodeEvaluate, PhantomJSEvaluate, Phase, UUID, execSync, fs,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

UUID = require('node-uuid');

execSync = require('exec-sync');

Helper = require('../helper');

Phase = require('./phase').Phase;

Evaluate = (function(_super) {

  __extends(Evaluate, _super);

  function Evaluate(context) {
    Evaluate.__super__.constructor.call(this, context, 'evaluate');
  }

  Evaluate.prototype.preCondition = function() {
    return Helper.assert(this.context.script != null);
  };

  Evaluate.prototype.execute = function() {
    return this.exec(this.context, this.context.script, this.context.env);
  };

  Evaluate.prototype.exec = function(context, script, env) {
    var cmd, filename, stderr, stdout, _ref;
    filename = this.getName_(env.file);
    this.createFile_(script, filename);
    try {
      cmd = this.execCmd(context, filename);
      _ref = execSync(cmd, true), stdout = _ref.stdout, stderr = _ref.stderr;
      if ((stdout != null) && stdout !== '') {
        this.writeResult(stdout);
      }
      if ((stderr != null) && stderr !== '') {
        return this.writeError(stderr);
      }
    } catch (error) {
      this.context.status = -1;
      throw error;
    } finally {
      this.deleteFile_(filename);
    }
  };

  Evaluate.prototype.getName_ = function(path) {
    var basename, dir, uuid, _ref;
    uuid = UUID.v1();
    _ref = Helper.splitAt(path, (path.lastIndexOf('/')) + 1), dir = _ref[0], basename = _ref[1];
    return "" + dir + "__JSXMP__" + uuid + basename;
  };

  Evaluate.prototype.createFile_ = function(script, filename) {
    return fs.writeFileSync(filename, script);
  };

  Evaluate.prototype.deleteFile_ = function(filename) {
    return fs.unlinkSync(filename);
  };

  return Evaluate;

})(Phase);

NodeEvaluate = (function(_super) {

  __extends(NodeEvaluate, _super);

  function NodeEvaluate() {
    return NodeEvaluate.__super__.constructor.apply(this, arguments);
  }

  NodeEvaluate.prototype.execCmd = function(context, filename) {
    return "node " + filename;
  };

  return NodeEvaluate;

})(Evaluate);

JasmineNodeEvaluate = (function(_super) {

  __extends(JasmineNodeEvaluate, _super);

  function JasmineNodeEvaluate() {
    return JasmineNodeEvaluate.__super__.constructor.apply(this, arguments);
  }

  JasmineNodeEvaluate.prototype.execCmd = function(context, filename) {
    return "jasmine-node --noColor " + filename;
  };

  return JasmineNodeEvaluate;

})(Evaluate);

PhantomJSEvaluate = (function(_super) {

  __extends(PhantomJSEvaluate, _super);

  function PhantomJSEvaluate() {
    return PhantomJSEvaluate.__super__.constructor.apply(this, arguments);
  }

  PhantomJSEvaluate.prototype.execCmd = function(context, filename) {
    return "phantomjs " + filename;
  };

  return PhantomJSEvaluate;

})(Evaluate);

exports.factory = function(context) {
  switch (context.env.evaluateBy) {
    case 'nodejs':
      if (context.env.mode === 'jasmine') {
        return new JasmineNodeEvaluate(context);
      } else {
        return new NodeEvaluate(context);
      }
      break;
    case 'phantomjs':
      return new PhantomJSEvaluate(context);
    default:
      return Helper.assert(false, "unknown mode=" + context.env.mode);
  }
};
