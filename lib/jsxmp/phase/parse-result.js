// Generated by CoffeeScript 1.4.0
var Const, Helper, ParseResult, Phase, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

Helper = require('../Helper');

Const = require('../Const');

Phase = require('./Phase').Phase;

ParseResult = (function(_super) {

  __extends(ParseResult, _super);

  ParseResult.prototype.RESULT_REGEXP = new RegExp("" + Const.ANNOTATION_PREFIX + "\.(\\d+)=(.+)$");

  ParseResult.prototype.CLEAR_REGEXP = new RegExp("\n?" + Const.ANNOTATION_PREFIX + ".+$", "mg");

  function ParseResult(context) {
    ParseResult.__super__.constructor.call(this, context, 'parse-result');
  }

  ParseResult.prototype.preCondition = function() {
    return Helper.assert(this.context.annotations != null);
  };

  ParseResult.prototype.postCondition = function() {
    return Helper.assert(this.context.annotations != null);
  };

  ParseResult.prototype.execute = function() {
    return this.parse(this.context.annotations, this.context.result);
  };

  ParseResult.prototype.parse = function(annotations, result) {
    var lines, matches,
      _this = this;
    lines = result.split('\n');
    matches = lines.filter(function(line) {
      return _this.RESULT_REGEXP.test(line);
    });
    matches.map(function(line) {
      return line.match(_this.RESULT_REGEXP);
    }).forEach(function(_arg) {
      var annotation, index, m, result;
      m = _arg[0], index = _arg[1], result = _arg[2];
      annotation = annotations[index];
      if (annotation.value != null) {
        return annotation.value.push(result);
      } else {
        return annotation.value = [result];
      }
    });
    return {
      annotations: annotations.filter(function(a) {
        return a.value != null;
      }),
      result: result.replace(this.CLEAR_REGEXP, '')
    };
  };

  return ParseResult;

})(Phase);

exports.factory = function(context) {
  return new ParseResult(context);
};
